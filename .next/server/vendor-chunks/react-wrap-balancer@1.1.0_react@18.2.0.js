"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-wrap-balancer@1.1.0_react@18.2.0";
exports.ids = ["vendor-chunks/react-wrap-balancer@1.1.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.0_react@18.2.0/node_modules/react-wrap-balancer/dist/index.mjs":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/react-wrap-balancer@1.1.0_react@18.2.0/node_modules/react-wrap-balancer/dist/index.mjs ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Balancer: () => (/* binding */ w),\n/* harmony export */   Provider: () => (/* binding */ $),\n/* harmony export */   \"default\": () => (/* binding */ L)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.2.3_@babel+core@7.24.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Balancer,Provider,default auto */ \n\nvar E = \"undefined\" == \"undefined\", m = E ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, h = 0, b = ()=>++h, _ = !1;\nfunction x() {\n    let [n, r] = react__WEBPACK_IMPORTED_MODULE_0__.useState(_ ? b : void 0);\n    return m(()=>{\n        n === void 0 && r(b()), _ = !0;\n    }, []), n === void 0 ? n : `rwb-${n.toString(32)}`;\n}\nfunction R() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>\"useId\" in react__WEBPACK_IMPORTED_MODULE_0__ ? react__WEBPACK_IMPORTED_MODULE_0__.useId : x, [])();\n}\nvar y = \"__wrap_b\", d = \"__wrap_n\", v = \"__wrap_o\", S = (n, r, e)=>{\n    e = e || document.querySelector(`[data-br=\"${n}\"]`);\n    let t = e.parentElement, c = (f)=>e.style.maxWidth = f + \"px\";\n    e.style.maxWidth = \"\";\n    let i = t.clientWidth, s = t.clientHeight, o = i / 2 - .25, a = i + .5, u;\n    if (i) {\n        for(c(o), o = Math.max(e.scrollWidth, o); o + 1 < a;)u = Math.round((o + a) / 2), c(u), t.clientHeight === s ? a = u : o = u;\n        c(a * r + i * (1 - r));\n    }\n    e.__wrap_o || (typeof ResizeObserver != \"undefined\" ? (e.__wrap_o = new ResizeObserver(()=>{\n        self.__wrap_b(0, +e.dataset.brr, e);\n    })).observe(t) :  true && console.warn(\"The browser you are using does not support the ResizeObserver API. Please consider add polyfill for this API to avoid potential layout shifts or upgrade your browser. Read more: https://github.com/shuding/react-wrap-balancer#browser-support-information\"));\n}, B = S.toString(), O = '(self.CSS&&CSS.supports(\"text-wrap\",\"balance\")?1:2)', T = (n, r, e = \"\")=>(e && (e = `self.${d}!=1&&${e}`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"script\", {\n        suppressHydrationWarning: !0,\n        dangerouslySetInnerHTML: {\n            __html: (n ? \"\" : `self.${d}=self.${d}||${O};self.${y}=${B};`) + e\n        },\n        nonce: r\n    })), g = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    preferNative: !0,\n    hasProvider: !1\n}), $ = ({ preferNative: n = !0, nonce: r, children: e })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            preferNative: n,\n            hasProvider: !0\n        }), [\n        n\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g.Provider, {\n        value: t\n    }, T(!1, r), e);\n}, w = ({ ratio: n = 1, preferNative: r, nonce: e, children: t, ...c })=>{\n    let i = R(), s = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), o = react__WEBPACK_IMPORTED_MODULE_0__.useContext(g), a = r != null ? r : o.preferNative, u = c.as || \"span\";\n    return m(()=>{\n        a && self[d] === 1 || s.current && (self[y] = S)(0, n, s.current);\n    }, [\n        t,\n        a,\n        n\n    ]), m(()=>{\n        if (!(a && self[d] === 1)) return ()=>{\n            if (!s.current) return;\n            let f = s.current[v];\n            f && (f.disconnect(), delete s.current[v]);\n        };\n    }, [\n        a\n    ]),  true && t && !Array.isArray(t) && typeof t == \"object\" && \"type\" in t && typeof t.type == \"string\" && t.type !== \"span\" && console.warn(`<Balancer> should not wrap <${t.type}> inside. Instead, it should directly wrap text or inline nodes.\n\nTry changing this:\n  <Balancer><${t.type}>content</${t.type}></Balancer>\nTo:\n  <${t.type}><Balancer>content</Balancer></${t.type}>`), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(u, {\n        ...c,\n        \"data-br\": i,\n        \"data-brr\": n,\n        ref: s,\n        style: {\n            display: \"inline-block\",\n            verticalAlign: \"top\",\n            textDecoration: \"inherit\",\n            textWrap: a ? \"balance\" : \"initial\"\n        },\n        suppressHydrationWarning: !0\n    }, t), T(o.hasProvider, e, `self.${y}(\"${i}\",${n})`));\n};\nif (!E && \"development\" !== \"production\") {\n    let n = document.querySelector(\"[data-next-hide-fouc]\");\n    if (n) {\n        let r = (t)=>{\n            for (let c of t)for (let i of Array.from(c.removedNodes)){\n                if (i !== n) continue;\n                e.disconnect();\n                let s = document.querySelectorAll(\"[data-br]\");\n                for (let o of Array.from(s))self[y](0, +o.dataset.brr, o);\n            }\n        }, e = new MutationObserver(r);\n        e.observe(document.head, {\n            childList: !0\n        });\n    }\n}\nvar L = w;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/react-wrap-balancer@1.1.0_react@18.2.0/node_modules/react-wrap-balancer/dist/index.mjs\n");

/***/ })

};
;